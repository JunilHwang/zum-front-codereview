{"version":3,"file":"app.js","mappings":"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","sources":["webpack://frontend/./src/core/CustomError/index.ts","webpack://frontend/./src/core/Store/classes/Publisher.ts","webpack://frontend/./src/utils/functions/localStorage.ts","webpack://frontend/./src/utils/functions/dataFetching.ts","webpack://frontend/./src/core/Store/mainPublisher.ts","webpack://frontend/./src/utils/functions/normal.ts","webpack://frontend/./src/core/Store/editPublisher.ts","webpack://frontend/./src/core/Component/functions.ts","webpack://frontend/./src/core/Component/vdom.ts","webpack://frontend/./src/core/Component/index.ts","webpack://frontend/./src/core/Store/classes/Subscriber.ts","webpack://frontend/./src/components/Board/index.ts","webpack://frontend/./src/components/Button/index.ts","webpack://frontend/./src/components/Input/index.ts","webpack://frontend/./src/components/Pagination/index.ts","webpack://frontend/./src/components/SelectBox/index.ts","webpack://frontend/./src/components/Textarea/index.ts","webpack://frontend/./src/compositions/DetailPageBottomBar/index.ts","webpack://frontend/./src/utils/types.ts","webpack://frontend/./src/compositions/DetailPageContent/index.ts","webpack://frontend/./src/compositions/EditPageBottomBar/index.ts","webpack://frontend/./src/compositions/EditPageContent/index.ts","webpack://frontend/./src/compositions/MainPageTopBar/index.ts","webpack://frontend/./src/compositions/MainPageBoard/index.ts","webpack://frontend/./src/pages/DetailPage/index.ts","webpack://frontend/./src/pages/EditPage/index.ts","webpack://frontend/./src/pages/MainPage/index.ts","webpack://frontend/./src/core/Router/functions.ts","webpack://frontend/./src/core/RouterLink/index.ts","webpack://frontend/./src/index.ts","webpack://frontend/./src/App.ts","webpack://frontend/./src/core/Router/index.ts"],"sourcesContent":["/**\n * [CustomError]\n */\n\ntype ErrorMessageName = \"NOT_FOUND_TARGET\" | \"NOT_FOUND_ROUTER_INFO\";\ntype ErrorMessageType = {\n  [name in ErrorMessageName]: string;\n};\nconst errorMessage: ErrorMessageType = {\n  NOT_FOUND_TARGET: `지정하려는 타켓을 찾을 수 없습니다.`,\n  NOT_FOUND_ROUTER_INFO: `페이지 정보를 담고 있는 RouterInfo를 불러올 수 없습니다.`,\n};\n\nclass CustomError extends Error {\n  constructor(public readonly msgType: ErrorMessageName, public readonly name: string = \"\") {\n    super(errorMessage[msgType]);\n  }\n}\n\nexport default CustomError;\n","interface RecentChangedKeys<S> {\n  prevKeys: (keyof S)[];\n  currKeys: (keyof S)[];\n  largeKeySet: Set<keyof S>;\n}\n\n/**\n * [Publisher]\n * - Store 역할을 하는 개체를 생성할 때 사용\n */\nclass Publisher<S = any> {\n  private _state: S;\n  private _prevState: S;\n  private _notExec: boolean = false;\n\n  private _recentChangedKeys: RecentChangedKeys<S> = { prevKeys: [], currKeys: [], largeKeySet: new Set() };\n  private readonly _observers: Set<Function> = new Set();\n\n  constructor(initState: S, private readonly setStateCallback?: () => void) {\n    this._state = initState;\n    this._prevState = initState;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  get recentChangedKeys() {\n    return this._recentChangedKeys;\n  }\n\n  private set state(newState: S) {\n    this._state = { ...newState };\n    this.setStateCallback && this.setStateCallback();\n    this.updateRecentChangedKeys();\n\n    if (this._notExec) this._notExec = false;\n    else this.exec();\n  }\n\n  setState(newState: S, options?: { notExec?: boolean }): void {\n    if (options && typeof options.notExec !== \"undefined\") this._notExec = options.notExec;\n    this._prevState = { ...this._state };\n    this.state = { ...this._state, ...newState }; // setter state에서 확정\n  }\n\n  /**\n   * 🧚🏻 exec\n   * - 이 Publisher에 등록된 함수 실행 (Subscriber들의 func)\n   */\n  exec(): void {\n    this._observers.forEach((func: Function) => func());\n  }\n\n  /**\n   * 🧚🏻 add\n   * - 이 Publisher에 함수 등록 (Subscriber의 func)\n   */\n  add(func: Function): void {\n    this._observers.add(func);\n  }\n\n  /**\n   * 🧚🏻 clear\n   * - 이 Publisher에 등록된 함수 제거 (단일)\n   */\n  remove(func: Function): void {\n    this._observers.delete(func);\n  }\n\n  /**\n   * 🧚🏻 clear\n   * - 이 Publisher에 등록된 함수 제거 (모두)\n   */\n  clear(): void {\n    this._observers.clear();\n  }\n\n  /**\n   * 🧚🏻 clearLargeKeySet\n   * - this._recentChangedKeys.largeKeySet 초기화\n   */\n  clearLargeKeySet() {\n    this._recentChangedKeys.largeKeySet.clear();\n  }\n\n  /**\n   * 👾 updateRecentChangedKeys\n   * - this._recentChangedKeys 업데이트\n   */\n  private updateRecentChangedKeys(): void {\n    const isInitPublisherState = Object.values(this._recentChangedKeys).every((arrValue) => !arrValue.length);\n\n    if (!isInitPublisherState) this._recentChangedKeys.prevKeys = [...this._recentChangedKeys.currKeys];\n    this._recentChangedKeys.currKeys = this.getRecentKeys() ?? [];\n\n    const { largeKeySet, currKeys } = this._recentChangedKeys;\n    const keyList = [...largeKeySet, ...currKeys];\n    keyList.forEach((v) => this._recentChangedKeys.largeKeySet.add(v));\n  }\n\n  /**\n   * 👾 getRecentKeys\n   * - 최근에 Publisher의 state에서 변경된 key들 반환\n   */\n  private getRecentKeys(): (keyof S)[] | null {\n    if (!this._state || !this._prevState) return null;\n    const arrState = Object.entries(this._state);\n    const arrPrevState = Object.entries(this._prevState);\n\n    const result = [];\n\n    for (let i = 0; i < arrState.length; i++) {\n      const [key, value] = arrState[i];\n      const [prevKey, prevValue] = arrPrevState[i];\n      const isDiff = key === prevKey && JSON.stringify(value) !== JSON.stringify(prevValue);\n      if (isDiff) result.push(key as keyof S);\n    }\n\n    return result;\n  }\n}\n\nexport default Publisher;\n","// 기본\nexport const setLocalItem = (key: string, value: string): void => localStorage.setItem(key, value);\nexport const getLocalItem = (key: string) => localStorage.getItem(key);\nexport const removeLocalItem = (key: string): void => localStorage.removeItem(key);\nexport const clearLocalStorage = (): void => localStorage.clear();\n\n// ----\n\n// 활용\nexport function getParseLocalItem<T>(key: string) {\n  const strItem = getLocalItem(key);\n  if (!strItem) return null;\n  return JSON.parse(strItem) as T;\n}\nexport function setConvertLocalItem(key: string, value: any): void {\n  return setLocalItem(key, JSON.stringify(value));\n}\nexport function addLocalItem(key: string, initValue: any) : void {\n  if (getParseLocalItem(key)) return;\n  setConvertLocalItem(key, initValue);\n}\n","import { PostData, ResponseDataType } from \"@common/types\";\n\ntype RequestPathTypes = \"getPost\" | \"write\" | \"edit\" | \"delete\";\ninterface ExecFetchProps {\n  type: RequestPathTypes;\n  options?: Pick<RequestInit, \"body\" | \"method\" | \"headers\"> & { id?: number };\n}\n\nconst createEndPoint = () => {\n  const isDevMode = process.env.NODE_ENV === \"development\";\n  const PORT = isDevMode ? 3000 : 4000;\n  return `http://localhost:${PORT}/api`;\n};\n\nconst createURL = (type: RequestPathTypes, id?: number) => {\n  const END_POINT = createEndPoint();\n  const currType = type === \"getPost\" ? \"post\" : type;\n  if (typeof id !== \"undefined\" && type === \"getPost\") return `${END_POINT}/${currType}/${id}`;\n  return `${END_POINT}/${currType}`;\n};\n\n/** ✨ execFetch: fetch API 활용하여 서버에서 데이터를 가져옴  */\nexport async function execFetch<T = any>({ type, options }: ExecFetchProps = { type: \"getPost\" }): Promise<T | null> {\n  try {\n    const url = createURL(type, options?.id);\n    const res = await fetch(url, options);\n\n    const isOK = 200 <= res.status && res.status < 400;\n    if (!isOK) throw new Error(`[!] API : status - ${res.status}`);\n\n    const resData: T = await res.json();\n    return resData;\n  } catch (e) {\n    console.error((e as Error).message);\n    return null;\n  }\n}\n\n// ---------\n\n/** ✨ getAllPostData: 서버에서 모든 게시물 데이터를 가져와서 정렬 및 추가 작업 후 반환 */\nexport async function getAllPostData(): Promise<PostData[] | undefined> {\n  try {\n    const resData = await execFetch<ResponseDataType<PostData[]>>();\n    if (!resData || !resData.data) return;\n\n    const { data: arrPosts } = resData;\n    arrPosts.forEach((post, i) => {\n      const { createdDate } = post;\n      if (!createdDate) return;\n      if (typeof createdDate === \"string\") arrPosts[i].createdDate = new Date(createdDate);\n    });\n    arrPosts.sort((a, b) => {\n      if (!a.id || !b.id) return 0;\n      return b.id - a.id;\n    });\n    return arrPosts;\n  } catch (e) {\n    console.error(e);\n  }\n}\n","import { Publisher } from \".\";\nimport { PostData } from \"@common/types\";\nimport { getParseLocalItem, pipe, setConvertLocalItem } from \"@src/utils/functions\";\n\n// [1] mainPublisher 정의\nexport interface MainFilterOptions {\n  author: string;\n  searchWord: string;\n  isDesc?: boolean;\n  numPost: number;\n  pageNum: number;\n}\n\nexport interface MainPublisherState {\n  postData: PostData[]; // 👈 (주의) 무조건 서버에서 수정 / 삭제 / 조회할 때만 갱신하기!!\n  editId: number;\n  isInit: boolean;\n  isRefresh: boolean;\n\n  filterOptions: MainFilterOptions; // 👈 (참고) 요놈만 변경되어도 됨!\n  numPostList: number[];\n}\n\ntype InitMainPublisherState = Readonly<Omit<MainPublisherState, \"postData\">> & Pick<MainPublisherState, \"postData\">;\nexport const initMainState: InitMainPublisherState = {\n  postData: [],\n  editId: -1,\n  isInit: false,\n  isRefresh: false,\n\n  filterOptions: {\n    author: \"\",\n    searchWord: \"\",\n    isDesc: undefined,\n    numPost: 5,\n    pageNum: 1,\n  },\n  numPostList: [5, 10, 20, 30, 50, 100],\n};\n\nexport const LOCAL_MAIN_KEY = \"zum_board_main\";\n\nfunction getLocalMainPublisherState(): MainPublisherState | null {\n  const state = getParseLocalItem<MainPublisherState>(LOCAL_MAIN_KEY);\n  if (!state) return null;\n  const arrPostData = state.postData;\n  arrPostData.forEach((data, i) => {\n    const { createdDate } = data;\n    if (!createdDate) return;\n    if (typeof createdDate === \"string\") state.postData[i].createdDate = new Date(createdDate);\n  });\n  return state;\n}\n\nconst setStateCallback = () => setConvertLocalItem(LOCAL_MAIN_KEY, mainPublisher.state);\nexport const mainPublisher: Publisher<MainPublisherState> = new Publisher(\n  getLocalMainPublisherState() ?? { ...initMainState },\n  setStateCallback\n);\n\n// ---------------------\n\n// [2] 게시물 필터링 함수 모음\n// - 게시글 목록 생성, (페이지 번호, 정렬, 작성자, 검색 등)이 변경되었을 때 사용될 함수들\n\ninterface CreatePostDataProps {\n  filterOptions: MainFilterOptions;\n  postData: PostData[];\n  isFullData?: boolean;\n}\n\n/** ✨ createPostData: 모든 필터 조건들을 활용하여 게시글 목록 생성 */\nexport function createPostData({ filterOptions, postData, isFullData }: CreatePostDataProps): PostData[] {\n  const { author, isDesc, numPost, pageNum, searchWord } = filterOptions;\n  const result = pipe<PostData[]>(\n    createAuthorFilterItems(author),\n    createSearchFilterItems(searchWord),\n    createDateSortItems(isDesc),\n    createNumPostItems(numPost, pageNum, isFullData)\n  )(postData);\n  return result;\n}\n\n/** 선택된 작성자 기준으로 필터링하여 게시글 목록 생성 -- (1) */\nfunction createAuthorFilterItems(author: string): (arrPostData: PostData[]) => void {\n  return (arrPostData: PostData[]) => {\n    if (!author) return arrPostData;\n    const filterData = arrPostData.filter((v) => v.author === author);\n    return filterData;\n  };\n}\n/** 검색창에 입력된 검색어 기준으로 필터링하여 게시글 목록 생성 -- (2) */\nfunction createSearchFilterItems(searchWord: string): (arrPostData: PostData[]) => void {\n  return (arrPostData: PostData[]) => {\n    if (!searchWord) return arrPostData;\n    const replacedSearchword = searchWord.replace(/\\s+/g, \"\");\n    const filterData = arrPostData.filter(({ subject }) => {\n      if (subject === null) return;\n      return subject.replace(/\\s+/g, \"\").indexOf(replacedSearchword) > -1;\n    });\n    return filterData;\n  };\n}\n/** 작성일 클릭 시, 내림차 & 오름차순으로 정렬한 게시글 목록 생성 -- (3) */\nfunction createDateSortItems(isDesc?: boolean): (arrPostData: PostData[]) => void {\n  return (arrPostData: PostData[]) => {\n    if (typeof isDesc === \"undefined\") return arrPostData;\n    const sortData = [...arrPostData].sort((a, b) => {\n      if (a.createdDate === null || b.createdDate === null) return 0;\n      // 내림차\n      if (isDesc) return b.createdDate.valueOf() - a.createdDate.valueOf();\n      else return a.createdDate.valueOf() - b.createdDate.valueOf(); // 오름차\n    });\n    return sortData;\n  };\n}\n\n/** 보여질 게시글 수만큼 게시글 목록 생성 -- (4) */\nfunction createNumPostItems(numPost: number, pageNum: number, isFullData?: boolean): (arrPostData: PostData[]) => void {\n  return (arrPostData: PostData[]) => {\n    if (isFullData) return arrPostData;\n    const max = Math.ceil(arrPostData.length / numPost);\n    if (pageNum > max) pageNum = max;\n    const startIdx = (pageNum - 1) * numPost;\n    const endIdx = pageNum * numPost;\n    return arrPostData.slice(startIdx, endIdx);\n  };\n}\n","export function pipe<T>(...funcs: Function[]) {\n  return (data: T) => funcs.reduce((currData, func) => func(currData), data);\n}","import { initMainState, MainPublisherState, Publisher } from \".\";\nimport { PostData } from \"@common/types\";\nimport { execFetch, getParseLocalItem, removeLocalItem, setConvertLocalItem } from \"@src/utils/functions\";\n\nexport interface EditPublisherState {\n  editData: PostData;\n  isEdited: boolean;\n}\n\nexport const initEditState: Readonly<EditPublisherState> = {\n  editData: {\n    id: null,\n    subject: null,\n    author: null,\n    createdDate: null,\n    contents: null,\n  },\n  isEdited: false,\n};\n\nexport const LOCAL_EDIT_KEY = \"zum_board_edit\";\n\nfunction isResetEditLocalState(): boolean {\n  const { origin, pathname } = new URL(window.location.href);\n  const mainLocalState = getParseLocalItem<MainPublisherState>(LOCAL_EDIT_KEY);\n  const editId = mainLocalState?.editId;\n  const isNeedReset = !editId || editId === initMainState.editId || pathname !== \"/edit\";\n  if (isNeedReset) {\n    window.history.pushState({ origin }, \"\", origin);\n    removeLocalItem(LOCAL_EDIT_KEY);\n  }\n  return isNeedReset;\n}\n\nfunction getLocalEditPublisherState(): EditPublisherState | null {\n  const isReset = isResetEditLocalState();\n  if (isReset) return null;\n\n  const state = getParseLocalItem<EditPublisherState>(LOCAL_EDIT_KEY);\n  if (!state) return null;\n  const { createdDate } = state.editData;\n  if (typeof createdDate === \"string\") state.editData.createdDate = new Date(createdDate);\n  return state;\n}\n\nconst setStateCallback = () => setConvertLocalItem(LOCAL_EDIT_KEY, editPublisher.state);\nexport const editPublisher: Publisher<EditPublisherState> = new Publisher(\n  getLocalEditPublisherState() ?? { ...initEditState },\n  setStateCallback\n);\n","const getRandomNumber = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport function makeComponentId(length: number = 16): string {\n  const [startCode, endCode] = [\"a\".charCodeAt(0), \"z\".charCodeAt(0)];\n  let result = \"\";\n  while (result.length < length) {\n    const isInNum = Boolean(Math.round(Math.random()));\n    if (isInNum) result += getRandomNumber(0, 9);\n    else result += String.fromCharCode(getRandomNumber(startCode, endCode));\n  }\n  return `__${result}`;\n}\n","/**\n * ✨ createNodes\n * - 주어진 Element의 childNodes 반환\n */\nexport function createNodes(originEle: Element | Node): Node[] {\n  return Array.from(originEle.childNodes);\n}\n\n/**\n * ✨ createTemplateNodes\n * - 임시 Element를 생성하여 innerHTML에 strTemplate를 대입 후 childNodes를 반환\n */\nexport function createTemplateNodes(strTemplate: string): Node[] {\n  const tempEle = document.createElement(\"div\");\n  tempEle.innerHTML = strTemplate;\n  return Array.from(tempEle.childNodes);\n}\n\n// ------\n\n/**\n * ✨ updateNodes\n * - 이전 Node들과 새로운 Node들을 비교하여 최신으로 업데이트\n */\nexport function updateNodes(\n  originEle: Element | Node,\n  prevNodes: Node[],\n  newNodes: Node[],\n  isNeedFixNodes?: boolean\n): void {\n  const MAX_LENGTH = Math.max(prevNodes.length, newNodes.length);\n  let idx = 0;\n\n  if (isNeedFixNodes && prevNodes.length > newNodes.length) fixedNewNodes(prevNodes, newNodes);\n\n  while (MAX_LENGTH > idx) {\n    const prevNode = prevNodes[idx];\n    const newNode = newNodes[idx];\n\n    // 1. 기본 비교\n    const isDfff = execDifferentCheck(originEle, prevNode, newNode);\n    if (isDfff) {\n      idx++;\n      continue;\n    }\n\n    // 2. 속성 비교\n    execAttributesCheck(prevNode, newNode);\n\n    // 3. 재귀\n    const prevChildren = createNodes(prevNode);\n    const newChildren = createNodes(newNode);\n    if (prevChildren.length || newChildren.length) updateNodes(prevNode, prevChildren, newChildren);\n    idx++;\n  }\n}\n\n/**\n * 👾 execDifferentCheck\n * - 이전 Node와 새로운 Node가 다를 때 모든 조건을 계산하고 업데이트\n *      - 이 함수가 마지막에 true를 반환했다면 attributes를 업데이트할 필요는 없음\n */\nfunction execDifferentCheck(originEle: Element | Node, prevNode: Node, newNode: Node) {\n  const isRemove = prevNode && !newNode;\n  const isAppend = !prevNode && newNode;\n\n  if (isRemove) originEle.removeChild(prevNode);\n  else if (isAppend) originEle.appendChild(newNode);\n  if (isRemove || isAppend) return true;\n\n  const isNotSameType = prevNode.nodeName !== newNode.nodeName;\n  const isTextType = [prevNode, newNode].every((node) => node instanceof Text);\n  const isDiffText = isTextType && prevNode.nodeValue !== newNode.nodeValue;\n\n  if (isNotSameType) originEle.replaceChild(newNode, prevNode);\n  else if (isDiffText) prevNode.nodeValue = newNode.nodeValue;\n  if (isNotSameType || isDiffText) return true;\n\n  return false;\n}\n\n/**\n * 👾 execAttributesCheck\n * - [!] 일반 Node 타입에서는 사용 불가.\n * - 이전 Element의 attributes를 새로운 Element의 attributes를 기준으로 업데이트\n *      - 업데이트 후, 새로운 Element에 없는 속성이라면 제거.\n */\nfunction execAttributesCheck(prevNode: Node | Element, newNode: Node | Element) {\n  if (!(prevNode instanceof Element) || !(newNode instanceof Element)) return;\n\n  const newAttrs = Array.from(newNode.attributes);\n  const prevAttrs = Array.from(prevNode.attributes);\n  newAttrs.forEach(\n    ({ name, value }) =>\n      prevAttrs.find(({ name: prevName, value: prevValue }) => name === prevName && value === prevValue) ??\n      prevNode.setAttribute(name, value)\n  );\n  prevAttrs.forEach(\n    ({ name }) => newAttrs.find(({ name: newName }) => newName === name) ?? prevNode.removeAttribute(name)\n  );\n}\n\n/**\n * 👾 fixedNewNodes\n * - Compoennt에서 isKeepAdding에 의해 _renderState 변경 시\n *    newNodes만 비교하여 업데이트하면 안됨.\n *    - prevNodes에는 다른 컴포넌트들에 의해 추가된 Element들이 있음.\n * - newNodes안에 prevNodes의 노드들을 추가하는 함수\n *   (newNodes에 이미 있는 Node는 변경하지 않음)\n */\nfunction fixedNewNodes(prevNodes: Node[], newNodes: Node[]): void {\n  prevNodes.forEach((prevNode, i) => {\n    const findSameIdNode = newNodes.find((newNode) => {\n      const isElement = newNode instanceof Element && prevNode instanceof Element;\n      if (!isElement) return;\n\n      let [prevId, newId] : (string | undefined)[] = Array.from({length: 2});\n      if (prevNode instanceof HTMLElement) prevId = prevNode.dataset.componentId;\n      if (newNode instanceof HTMLElement) newId = newNode.dataset.componentId;\n      if ((prevId && newId) && prevId === newId) return true;\n\n      [prevId, newId] = [prevNode.id, newNode.id];\n      if ((prevId && newId) && prevId === newId) return true;\n    });\n    if (findSameIdNode) return;\n    const tmpNode = newNodes[i];\n    if (tmpNode) newNodes[i + 1] = tmpNode;\n    newNodes[i] = prevNode;\n  });\n}\n","import CustomError from \"../CustomError\";\nimport { Publisher, Subscriber } from \"../Store\";\nimport { makeComponentId } from \"./functions\";\nimport { createNodes, createTemplateNodes, updateNodes } from \"./vdom\";\n\nexport type TargetType = Element | string | null;\nexport interface ComponentConstructor<P extends Props = {}> {\n  new ($target: TargetType, props?: P): Component;\n}\n\nexport interface ComponentItemType<P extends Props = {}> {\n  Component: ComponentConstructor<P>;\n  $target: TargetType;\n  props?: P;\n}\n\nconst defaultPropsKeys = [\"isNotKeepAdding\", \"initInsertPosition\"] as const;\ninterface DefaultProps {\n  isNotKeepAdding?: boolean;\n  initInsertPosition?: InsertPosition;\n}\nexport type Props<P = {}> = P & DefaultProps;\n\nexport interface SetStateOptions {\n  noRender?: boolean;\n  isSetEvents?: boolean;\n}\n\ntype RenderState = \"default\" | \"adding\" | \"done\" | \"disabled\";\n\n/**\n * [Component]\n * - 모든 컴포넌트(일반, page, Link)의 부모가 되는 class\n * - 생성 시 동작 과정: constructor -> init -> render -> setTemplate -> setChildren -> setEvents\n */\nclass Component<S = {}, P extends Props = DefaultProps> {\n  private _state: S | undefined;\n  private _renderState: RenderState = \"adding\";\n  protected _subscriber: Subscriber | undefined;\n  protected readonly componentId: string = makeComponentId();\n\n  constructor(protected readonly $target: TargetType, protected props: P = {} as Props<P>) {\n    try {\n      if ($target === null) throw new CustomError(\"NOT_FOUND_TARGET\", this.constructor.name);\n      else if (typeof $target === \"string\") this.$target = document.querySelector($target);\n      this.init();\n      this.initSubscriber();\n      this.render();\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  /**\n   * ✨ init\n   * - setState를 활용하여 초기 state를 정해주는 등 초기화가 필요한 작업이 있을 때 사용\n   */\n  protected init(): void {}\n\n  /**\n   * ✨ initSubscriber\n   * - registerSubscriberFunction() 를 활용할 때 사용\n   */\n  protected initSubscriber(): void {}\n\n  /**\n   * ✨ registerSubscriberFunction\n   * - this._subscriber에 함수를 등록하고 이 함수를 publisher의 observer에 등록\n   * - [!] initSubscriber() 메서드 내에서 사용하기\n   */\n  protected registerSubscriberFunction(publisher: Publisher, func: Function): void {\n    if (!this._subscriber) this._subscriber = new Subscriber();\n    this._subscriber.func = func;\n    this._subscriber.registerFunc(publisher);\n  }\n\n  /**\n   * ✨ setState\n   * - state를 정의하거나 업데이트할 때 사용\n   */\n  protected setState(newState: S, options?: SetStateOptions): void {\n    this._state = { ...this._state, ...newState };\n    options?.noRender || this.render(options?.isSetEvents ?? true);\n  }\n  protected get state() {\n    return this._state;\n  }\n\n  /**\n   * ✨ setBeforeRender\n   * - render 함수 바로 직전에 실행되어야 할 사항들을 설정\n   */\n  protected setBeforeRender(): void {}\n\n  /**\n   * 👾 render\n   * - 컴포넌트의 Template를 생성하고, props.children에 있는 컴포넌트들을 생성 후 Event 등록.\n   */\n  private render(isSetEvents: boolean = true): void {\n    const { $target, props } = this;\n    if ($target === null || typeof $target === \"string\") return;\n\n    this.setBeforeRender();\n\n    const { isNotKeepAdding, initInsertPosition } = props;\n    if (isNotKeepAdding) this._renderState = \"disabled\";\n\n    const { _renderState } = this;\n    if (_renderState === \"adding\") {\n      const insertPosition: InsertPosition = initInsertPosition ?? \"beforeend\";\n      $target.insertAdjacentHTML(insertPosition, this.setTemplate());\n      this._renderState = \"done\";\n    } else this.updateComponentNodes($target, _renderState === \"done\");\n\n    this.setChildren();\n    isSetEvents && this.setEvents();\n  }\n  private updateComponentNodes($target: Element, isNeedFixNodes?: boolean) {\n    const prevNodes = createNodes($target);\n    const newNodes = createTemplateNodes(this.setTemplate());\n    updateNodes($target, prevNodes, newNodes, isNeedFixNodes);\n  }\n\n  /**\n   * ✨ setTemplate\n   * - 컴포넌트의 Template 설정\n   */\n  protected setTemplate(): string {\n    return \"\";\n  }\n\n  /**\n   * ✨ setChildren\n   * - render 후, 컴포넌트를 구성하는 자식 컴포넌트를 렌더링 할 때 사용\n   */\n  protected setChildren(): void {}\n\n  /**\n   * ✨ setEvents\n   * - 컴포넌트내의 요소들에 이벤트 설정\n   */\n  protected setEvents(): void {}\n\n  /**\n   * ✨ getEventTarget\n   * - 각 컴포넌트에서 이벤트 생성 시, 이벤트가 등록될 Element를 가져옴\n   *    - Component의 componentId 프로퍼티 값을 기준으로 Element를 가져옴\n   *      (없다면 현재 컴포넌트가 등록된 this.$target(부모)를 가져옴)\n   */\n  protected getEventTarget(): Element | null {\n    let $result = null;\n    const { $target, componentId } = this;\n    if (!componentId) $result = typeof $target === \"string\" ? document.querySelector($target) : $target;\n    else $result = document.querySelector(`[data-component-id=${componentId}]`);\n    return $result;\n  }\n\n  /**\n   * ✨ createStringAttribute\n   * - 컴포넌트에서 렌더링하는 template에 attribute를 추가할 때 사용\n   */\n  protected createStringAttribute(...excludeStrs: string[]): string {\n    const arrExclude = [...defaultPropsKeys, ...excludeStrs];\n    const strAttribute = Object.entries(this.props).reduce((result, [key, value]) => {\n      if (arrExclude.includes(key)) return result;\n      result += `${key}=\"${value}\" `;\n      return result;\n    }, \"\");\n    return strAttribute;\n  }\n}\n\nexport default Component;\n","import Publisher from \"./Publisher\";\n\n/**\n * [Subscriber]\n * - 컴포넌트내에서 생성함.\n * - Publisher와 데이터를 주고 받기 위해 사용\n */\nclass Subscriber {\n  constructor(public func?: Function) {}\n\n  /**\n   * 🧚🏻 registerFunc\n   * - publisher에 Subscriber의 func 등록  \n   *  (특정 Publisher 구독)\n   */\n  registerFunc(publisher: Publisher): void {\n    if (this.func) publisher.add(this.func);\n  }\n\n  /**\n   * 🧚🏻 removeFunc\n   * - publisher에 Subscriber의 func 제거  \n   *  (특정 Publisher 구독 취소)\n   */\n  removeFunc(publisher: Publisher): void {\n    if (this.func) publisher.remove(this.func);\n  }\n}\n\nexport default Subscriber;\n","import { Component, createRouterInfo, Props, RouterLink, TargetType } from \"@src/core\";\nimport { editPublisher, mainPublisher } from \"@src/core/Store\";\nimport { PostData } from \"@common/types\";\nimport \"./style.scss\";\n\ninterface BoardProps extends Props {\n  arrPostData: PostData[];\n}\n\nclass Board extends Component<{}, BoardProps> {\n  constructor(protected readonly $target: TargetType, protected props: BoardProps) {\n    super($target, props);\n  }\n  protected setTemplate(): string {\n    const { componentId, props } = this;\n    const { arrPostData } = props;\n\n    const arrHeadKeyName: string[] = arrPostData?.length ? Object.keys(arrPostData[0]) : [];\n    const arrHeadData = [\n      [\"번호\", 15],\n      [\"제목\", 55],\n      [\"작성자\", 15],\n      [\"작성일\", 15],\n    ];\n\n    const strData = this.createTDStrings(arrPostData);\n    return `<table class=\"app-board\" data-component-id=${componentId}>\n    <thead>\n      <tr>\n      ${arrHeadData\n        .map(([txt, width], i) => {\n          const thClassName = arrHeadKeyName[i] ? `class=${arrHeadKeyName[i]}` : \"\";\n          return `<th style=${`width:` + `${width}%; ${thClassName}`}>${txt}</th>`;\n        })\n        .join(\"\")}\n      </tr>\n    </thead>\n      ${strData.length ? `<tbody>${strData.map((str) => `${str}`).join(\"\")}</tbody>` : \"\"}\n    </table>\n    `;\n  }\n\n  protected setChildren(): void {\n    const {\n      props: { arrPostData },\n    } = this;\n\n    // 제목 생성 (RouterLink)\n    const routerInfo = createRouterInfo();\n    arrPostData.forEach(({ id, subject }) => {\n      const $tdSubject = document.querySelector(`tr[data-id=\"${id}\"] td.subject`);\n      if (!$tdSubject) return;\n      new RouterLink($tdSubject, {\n        href: `/detail?id=${id}`,\n        text: subject ?? '제목 없음',\n        routerInfo,\n        publisherList: [mainPublisher, editPublisher],\n      });\n    });\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  private createTDStrings(arrPostData: PostData[]): string[] {\n    const result: string[] = [];\n    if (!arrPostData.length) return [];\n    arrPostData.forEach((data) => {\n      const { id } = data;\n      const strTds = Object.entries(data).reduce((result, [key, value]) => {\n        if (key === \"contents\") return result;\n        const isSubject = key !== \"subject\"; // 제목의 경우 RouterLink 컴포넌트로 생성\n        value = value instanceof Date ? value.toLocaleDateString() : value;\n        result += `<td class=${key}>${isSubject ? value : \"\"}</td>`;\n        return result;\n      }, \"\");\n      result.push(`<tr data-id=${id}>${strTds}</tr>`);\n    });\n    return result;\n  }\n  // ------\n}\n\nexport default Board;\n","import { Component, Props, TargetType } from \"@src/core\";\nimport \"./style.scss\";\n\ntype DefaultButtonProps = Pick<HTMLButtonElement, \"name\"> & Partial<Pick<HTMLButtonElement, \"type\">>;\ninterface ButtonProps extends Props, DefaultButtonProps {\n  text: string;\n}\n\nclass Button extends Component<{}, ButtonProps> {\n  constructor(protected readonly $target: TargetType, protected props: ButtonProps) {\n    super($target, props);\n  }\n  protected setTemplate(): string {\n    const { componentId, props } = this;\n    return `<button class=\"app-button\" ${this.createStringAttribute(\"text\")} data-component-id=${componentId}>${\n      props.text\n    }</button>`;\n  }\n}\n\nexport default Button;\n","import { Component, Props, TargetType } from \"@src/core\";\nimport \"./style.scss\";\n\ntype DefaultInputProps = Pick<HTMLInputElement, \"name\" | \"type\"> &\n  Partial<Pick<HTMLInputElement, \"placeholder\" | \"value\">>;\ninterface InputProps extends Props, DefaultInputProps {}\n\nclass Input extends Component<{}, InputProps> {\n  constructor(protected readonly $target: TargetType, protected props: InputProps) {\n    super($target, props);\n  }\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<input class=\"app-input\" ${this.createStringAttribute()} data-component-id=${componentId}></input>`;\n  }\n}\n\nexport default Input;\n","import { Component, Props, TargetType } from \"@src/core\";\nimport \"./style.scss\";\n\ninterface PaginationProps extends Props {\n  pageNum: number;\n  max: number;\n}\n\nclass Pagination extends Component<{}, PaginationProps> {\n  constructor(protected readonly $target: TargetType, protected props: PaginationProps) {\n    super($target, props);\n  }\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `\n    <div class=\"app-pagination\" data-component-id=${componentId}>\n      <ul class=\"list\">\n        ${this.createLiItemStrings().join(\"\")}\n      </ul>\n    </div>\n    `;\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  private createLiItemStrings(): string[] {\n    let { pageNum, max } = this.props;\n    if (pageNum > max && pageNum !== 1) pageNum = max;\n\n    const MAX_NUM_OF_PAGE = 5;\n    const REMAINDER = pageNum % MAX_NUM_OF_PAGE === 0 ? MAX_NUM_OF_PAGE : pageNum % MAX_NUM_OF_PAGE;\n\n    const startIdx = pageNum - REMAINDER;\n    const endIdx = pageNum + (MAX_NUM_OF_PAGE - REMAINDER);\n\n    const items: string[] = [];\n    let nIdx = startIdx;\n    while (nIdx < endIdx) {\n      if (nIdx + 1 > max) break;\n      const strClassName = nIdx + 1 === pageNum ? `class=\"current\"` : \"\";\n      items.push(`<li ${strClassName}>${nIdx + 1}</li>`);\n      nIdx++;\n    }\n\n    const isStart = startIdx === 0;\n    const isLast = max === nIdx;\n\n    const strFirstItem = `<li class=\"prev${isStart ? \" disabled\" : \"\"}\">&larr;</li>`;\n    const strLastItem = `<li class=\"next${isLast ? \" disabled\" : \"\"}\">&rarr;</li>`;\n\n    return [strFirstItem, ...items, strLastItem];\n  }\n}\nexport default Pagination;\n","import { Component, Props, TargetType } from \"@src/core\";\nimport { MainPublisherState } from \"@src/core/Store\";\nimport \"./style.scss\";\n\ntype DefaultSelectBoxProps = Pick<MainPublisherState, \"numPostList\">;\ninterface SelectBoxProps extends Props, DefaultSelectBoxProps {\n  selectedValue?: string | number;\n}\n\nclass SelectBox extends Component<{}, SelectBoxProps> {\n  constructor(protected readonly $target: TargetType, protected props: SelectBoxProps) {\n    super($target, props);\n  }\n\n  protected setTemplate(): string {\n    const { componentId, props } = this;\n    const { numPostList, selectedValue } = props;\n    if (!numPostList.length) return ``;\n    return `\n    <select class=\"app-selectbox\" data-component-id=${componentId}>\n      ${numPostList.map((v) => `<option value=${v} ${selectedValue === v ? 'selected' : ''}>${v}</option>`).join(\"\")}\n    </select>\n    `;\n  }\n}\n\nexport default SelectBox;\n","import { Component, Props, TargetType } from \"@src/core\";\nimport \"./style.scss\";\n\ntype DefaultTextareaProps = Pick<HTMLTextAreaElement, \"name\"> &\n  Partial<Pick<HTMLTextAreaElement, \"placeholder\" | \"rows\" | \"cols\" | \"maxLength\" | \"value\">>;\ninterface TextareaProps extends Props, DefaultTextareaProps {\n  isFullSize?: boolean;\n}\n\nclass Textarea extends Component<{}, TextareaProps> {\n  constructor(protected readonly $target: TargetType, protected props: TextareaProps) {\n    super($target, props);\n  }\n\n  protected setTemplate(): string {\n    const { componentId, props } = this;\n    const { value, isFullSize } = props;\n    const strFullSize = isFullSize ? `fullsize` : \"\";\n    return `<textarea class=\"app-textarea ${strFullSize}\"  ${this.createStringAttribute(\n      \"value\",\n      \"isFullSize\"\n    )} data-component-id=${componentId}>${value ? value : \"\"}</textarea>`;\n  }\n}\n\nexport default Textarea;\n","import { Button } from \"@src/components\";\nimport { Component, createRouterInfo, Props, RouterLink } from \"@src/core\";\nimport { editPublisher, mainPublisher } from \"@src/core/Store\";\nimport { execFetch } from \"@src/utils/functions\";\nimport \"./style.scss\";\n\ninterface DetailPageBottomBarProps extends Props {\n  dataId?: string;\n}\n\nclass DetailPageBottomBar extends Component<{}, DetailPageBottomBarProps> {\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<div class=\"detail__page--bottombar\" data-component-id=${componentId}></div>`;\n  }\n\n  protected setChildren(): void {\n    const { props } = this;\n    const routerInfo = createRouterInfo();\n    const commonLinkProps = { isButton: true, routerInfo, publisherList: [mainPublisher, editPublisher] };\n    const editId = props.dataId ? +props.dataId : -1;\n\n    new RouterLink(\".detail__page--bottombar\", {\n      ...commonLinkProps,\n      href: `/edit`,\n      text: \"수정\",\n      callbackOption: {\n        func: () => mainPublisher.setState({ ...mainPublisher.state, editId }),\n        runPosition: \"afterRenderPath\",\n      },\n    });\n    new Button(\".detail__page--bottombar\", { name: \"delete\", text: \"삭제\" });\n    new RouterLink(\".detail__page--bottombar\", { ...commonLinkProps, href: `/`, text: \"목록\" });\n  }\n\n  protected setEvents(): void {\n    this.registerDetailBottomBarClick();\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  // ------\n\n  // [2] Events\n  private registerDetailBottomBarClick(): void {\n    this.getEventTarget()?.addEventListener(\"click\", (e) => this.handleDetailBottomBarClick(e));\n  }\n\n  private handleDetailBottomBarClick(e: MouseEvent | Event): void {\n    const $target = e.target as HTMLElement;\n    const isButton = $target.classList.contains(\"app-button\") && $target instanceof HTMLButtonElement;\n    if (!isButton) return;\n    if ($target.name === \"delete\") {\n      const isDelete = confirm(\"정말 삭제하시겠습니까?\");\n      if (!isDelete) return;\n      this.requestDeleteData();\n    }\n  }\n  // 서버로 전송 (게시글 삭제)\n  private async requestDeleteData(): Promise<void> {\n    try {\n      const { dataId: id } = this.props;\n      const options = {\n        method: \"DELETE\",\n        body: JSON.stringify({ id }),\n        headers: { \"Content-Type\": \"application/json\" },\n      };\n      await execFetch({ type: \"delete\", options });\n      editPublisher.setState({ ...editPublisher.state, isEdited: true });\n      window.history.back();\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  // ------\n\n  // [3] 전역 상태 변경 시 사용\n  // ------\n}\nexport default DetailPageBottomBar;\n","import { PostData } from \"@common/types\";\n\nexport type PostDataKorKeys = {\n  [name in keyof PostData]: string;\n};\nexport const postDataKorKeys: PostDataKorKeys = {\n  id: \"번호\",\n  subject: \"제목\",\n  author: \"작성자\",\n  createdDate: \"작성일\",\n  contents: \"내용\",\n};\n\nexport type RequiredPostDataKey = keyof Omit<PostData, \"id\" | \"createdDate\">;\nexport const requiredPostDataKeys: RequiredPostDataKey[] = [\"author\", \"contents\", \"subject\"];\n","import { Component, Props } from \"@src/core\";\nimport { mainPublisher } from \"@src/core/Store\";\nimport { postDataKorKeys } from \"@src/utils/types\";\nimport { PostData } from \"@common/types\";\nimport \"./style.scss\";\n\ninterface DetailPageContentProps extends Props {\n  dataId?: string;\n}\n\ninterface PostDataHTMLType {\n  textInfoStrings: string;\n  contents: string;\n}\n\nclass DetailPageContent extends Component<{}, DetailPageContentProps> {\n  protected setTemplate(): string {\n    const { componentId, props } = this;\n    const dataId = props.dataId ? +props.dataId : -1;\n\n    const { textInfoStrings, contents } = this.createPostDataStrings(dataId);\n\n    return `\n    <div class=\"detail__page--content\" data-component-id=${componentId}>\n      <ul class=\"textinfo\">${textInfoStrings}</ul>\n      <div class=\"contents\">${contents}</div>\n    </div>`;\n  }\n\n  protected setChildren(): void {}\n\n  protected setEvents(): void {}\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  private createPostDataStrings(dataId: number): PostDataHTMLType {\n    const postData = mainPublisher.state.postData.find((v) => v.id === dataId);\n    if (!postData) return { textInfoStrings: \"\", contents: \"\" };\n    const textInfoItems: string[] = [];\n\n    const keys = Object.keys(postData) as (keyof PostData)[];\n    for (let i = 0; i < keys.length; i++) {\n      if (keys[i] === \"contents\") continue;\n      const name = postDataKorKeys[keys[i]];\n      let value = postData[keys[i]];\n      if (keys[i] === \"createdDate\") value = (value as Date).toLocaleString();\n      textInfoItems.push(`<li><span class=\"name\">${name}</span><span>${value ?? ''}</span></li>`);\n    }\n\n    return { textInfoStrings: textInfoItems.join(\"\"), contents: postData[\"contents\"] ?? \"내용 없음\" };\n  }\n  // ------\n\n  // [2] Events\n  // ------\n\n  // [3] 전역 상태 변경 시 사용\n  // ------\n}\nexport default DetailPageContent;\n","import { PostData } from \"@common/types\";\nimport { Button } from \"@src/components\";\nimport { Component, createRouterInfo, RouterLink } from \"@src/core\";\nimport { editPublisher, mainPublisher, initEditState } from \"@src/core/Store\";\nimport { execFetch } from \"@src/utils/functions\";\nimport { requiredPostDataKeys } from \"@src/utils/types\";\n\nimport \"./style.scss\";\n\nclass EditPageBottomBar extends Component {\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<div class=\"edit__page--bottombar\" data-component-id=${componentId}></div>`;\n  }\n\n  protected setChildren(): void {\n    const routerInfo = createRouterInfo();\n    const commonLinkProps = { isButton: true, routerInfo, publisherList: [mainPublisher, editPublisher] };\n\n    new Button(\".edit__page--bottombar\", { name: \"goback\", text: \"뒤로\" });\n    new RouterLink(\".edit__page--bottombar\", {\n      ...commonLinkProps,\n      href: `/`,\n      name: \"submitlink\",\n      text: \"전송\",\n      callbackOption: { func: () => this.regsiterEditData(), runPosition: \"beforePushState\" },\n    });\n  }\n\n  protected setEvents(): void {\n    this.registerEditBottomBarClick();\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  // ------\n\n  // [2] Events\n  private registerEditBottomBarClick(): void {\n    this.getEventTarget()?.addEventListener(\"click\", (e) => this.handleEditBottomBarClick(e));\n  }\n\n  private handleEditBottomBarClick(e: MouseEvent | Event): void {\n    const $target = e.target as HTMLElement;\n    const isButton = $target.classList.contains(\"app-button\") && $target instanceof HTMLButtonElement;\n    if (!isButton) return;\n    if ($target.name === \"goback\") window.history.back();\n  }\n\n  // [2-1] Events (callback)\n  /** RouterLink(submitlink)의 콜백, 현재 데이터를 전송 (작성 / 수정)  */\n  private regsiterEditData(): boolean {\n    const { editData } = editPublisher.state;\n    const notEmptyCnt = Object.keys(editData).reduce((result, key) => {\n      if (editData[key as keyof PostData]) result++;\n      return result;\n    }, 0);\n    const isOK = notEmptyCnt >= requiredPostDataKeys.length;\n    if (!isOK) return false;\n    const isEdit = notEmptyCnt > requiredPostDataKeys.length;\n\n    this.requestCreateData(editData, isEdit);\n    editPublisher.setState({ ...editPublisher.state, editData: initEditState.editData });\n    return isOK;\n  }\n\n  // 서버로 전송 (작성 or 수정)\n  private async requestCreateData(editData: PostData, isEdit?: boolean): Promise<void> {\n    try {\n      const type = isEdit ? \"edit\" : \"write\";\n      const method = isEdit ? \"PUT\" : \"POST\";\n      const options = { method, body: JSON.stringify(editData), headers: { \"Content-Type\": \"application/json\" } };\n      await execFetch({ type, options });\n      editPublisher.setState({ ...editPublisher.state, isEdited: true });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  // ------\n\n  // [3] 전역 상태 변경 시 사용\n  // ------\n}\nexport default EditPageBottomBar;\n","import { Input, Textarea } from \"@src/components\";\nimport { Component, Props } from \"@src/core\";\nimport { editPublisher } from \"@src/core/Store\";\n\nimport { postDataKorKeys, PostDataKorKeys } from \"@src/utils/types\";\nimport { PostData } from \"@common/types\";\n\nimport \"./style.scss\";\n\ninterface EditPageContentProps extends Props {\n  editData?: PostData;\n}\n\nclass EditPageContent extends Component<{}, EditPageContentProps> {\n  protected setTemplate(): string {\n    const { componentId } = this;\n    const editInfoStrings = this.createEditInfoStrings();\n    return `\n    <div class=\"edit__page--content\" data-component-id=${componentId}>\n      <ul class=\"editinfo\">${editInfoStrings}</ul>\n      <div class=\"editbox\"></div>\n    </div>`;\n  }\n\n  protected setChildren(): void {\n    const { editData } = this.props;\n\n    const nameKeys: (keyof PostDataKorKeys)[] = [\"subject\", \"author\"];\n    nameKeys.forEach((name, i) => {\n      if (!editData) return;\n      let value = editData[name];\n      if (typeof value !== \"string\") value = \"\";\n      const placeholder = postDataKorKeys[name];\n      new Input(`ul.editinfo li[data-key=\"${i}\"]`, { name, type: \"text\", value, placeholder });\n    });\n\n    new Textarea(`.editbox`, {\n      name: \"contents\",\n      value: editData && (editData[\"contents\"] ?? \"\"),\n      isFullSize: true,\n      placeholder: \"하고싶은 말은..?\",\n    });\n  }\n\n  protected setEvents(): void {\n    this.registerEditContentsKeyup();\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  private createEditInfoStrings(): string {\n    const nameKeys: (keyof PostDataKorKeys)[] = [\"subject\", \"author\"];\n    const editInfoItems: string[] = nameKeys.reduce((result, key, i) => {\n      const strItem = `<li data-key=${i}><span class=\"name\">${postDataKorKeys[key]}</span></li>`; // input은 setChildren에서 렌더링\n      result.push(strItem);\n      return result;\n    }, [] as string[]);\n    return editInfoItems.join(\"\");\n  }\n  // ------\n\n  // [2] Events\n  private registerEditContentsKeyup(): void {\n    this.getEventTarget()?.addEventListener(\"keyup\", (e) => this.handleEditContentsKeyup(e));\n  }\n\n  private handleEditContentsKeyup(e: KeyboardEvent | Event): void {\n    const $target = e.target as HTMLElement;\n    const isTextarea = $target.nodeName === \"TEXTAREA\" && $target.classList.contains(\"app-textarea\");\n    const isInput = $target.nodeName === \"INPUT\" && $target.classList.contains(\"app-input\");\n    if (!isInput && !isTextarea) return;\n\n    if (isTextarea) {\n      const contents = ($target as HTMLTextAreaElement).value;\n      const { state } = editPublisher;\n      editPublisher.setState({ ...state, editData: { ...state.editData, contents } });\n    } else {\n      const name = ($target as HTMLInputElement).name;\n      const value = ($target as HTMLInputElement).value;\n      const { state } = editPublisher;\n      editPublisher.setState({ ...state, editData: { ...state.editData, [name]: value } });\n    }\n  }\n  // ------\n\n  // [3] 전역 상태 변경 시 사용\n  // ------\n}\nexport default EditPageContent;\n","import { Button, Input, SelectBox } from \"@src/components\";\nimport { Component, createRouterInfo, RouterLink } from \"@src/core\";\nimport { mainPublisher, initMainState, MainFilterOptions, editPublisher, initEditState } from \"@src/core/Store\";\nimport { getAllPostData } from \"@src/utils/functions\";\nimport \"./style.scss\";\n\nclass MainPageTopBar extends Component {\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `\n    <div class=\"main__page--topbar\" data-component-id=${componentId}>\n      <div class=\"topbar--box\"></div>\n      <div class=\"topbar--box\"></div>\n    </div>`;\n  }\n  protected setChildren(): void {\n    const routerInfo = createRouterInfo();\n    const { numPostList, filterOptions } = mainPublisher.state;\n    const { searchWord, numPost } = filterOptions;\n\n    const createSelector = (idx: number) => `.main__page--topbar .topbar--box:nth-child(${idx})`;\n    new Button(createSelector(1), { name: \"refrash\", text: \"새로고침\" });\n    new Button(createSelector(1), { name: \"init\", text: \"초기화\" });\n    new RouterLink(createSelector(1), {\n      href: \"/write\",\n      text: \"작성\",\n      routerInfo,\n      isButton: true,\n      publisherList: [mainPublisher, editPublisher],\n      callbackOption: {\n        func: () => editPublisher.setState({ ...initEditState }),\n        runPosition: \"beforePushState\",\n      },\n    });\n    new Input(createSelector(2), {\n      name: \"search_input\",\n      type: \"text\",\n      placeholder: \"검색어를 입력해주세요.\",\n      value: searchWord,\n    });\n    new SelectBox(createSelector(2), { numPostList, selectedValue: numPost });\n  }\n\n  protected setEvents(): void {\n    this.registerMainTopBarClick();\n    this.registerMainTopBarKeyUp();\n    this.registerMainTopBarChange();\n  }\n\n  // --------------------------------------------------\n\n  // [1] Events\n  private registerMainTopBarClick(): void {\n    this.getEventTarget()?.addEventListener(\"click\", (e) => this.handleMainTopBarClick(e));\n  }\n\n  private handleMainTopBarClick(e: MouseEvent | Event): void {\n    const $target = e.target as HTMLElement;\n    const $closestTarget = $target.closest(\".topbar--box\");\n    if (!$closestTarget) return;\n\n    const isButton = $target.classList.contains(\"app-button\") && $target instanceof HTMLButtonElement;\n    if (isButton) {\n      const buttonName = $target.name;\n      if (buttonName === \"init\") this.initMainTopBarElements();\n      else if (buttonName === \"refrash\") this.refrashPostData();\n    }\n  }\n  // 초기화\n  private initMainTopBarElements(): void {\n    const strInputSelector = `.topbar--box:nth-child(2) input[name=\"search_input\"]`;\n    const $searchInput = this.getEventTarget()?.querySelector(strInputSelector);\n    $searchInput && (($searchInput as HTMLInputElement).value = \"\");\n\n    const { filterOptions } = initMainState;\n    const strSelectBoxSelector = `.topbar--box:nth-child(2) .app-selectbox`;\n    const $selectbox = this.getEventTarget()?.querySelector(strSelectBoxSelector);\n    $selectbox && (($selectbox as HTMLSelectElement).value = `${filterOptions.numPost}`);\n\n    mainPublisher.setState({ ...initMainState, isInit: true });\n  }\n  // 새로고침\n  private async refrashPostData(): Promise<void> {\n    try {\n      const latestPostdata = await getAllPostData();\n      if (!latestPostdata) return;\n      initMainState.postData = latestPostdata;\n      mainPublisher.setState({ ...mainPublisher.state, postData: [...latestPostdata], isRefresh: true });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  // ~~~\n\n  private registerMainTopBarKeyUp(): void {\n    this.getEventTarget()?.addEventListener(\"keyup\", (e) => this.handleMainTopBarKeyUp(e));\n  }\n\n  private handleMainTopBarKeyUp(e: KeyboardEvent | Event): void {\n    const $target = e.target as HTMLInputElement;\n    const isSearchInput = $target.name === \"search_input\" && $target.nodeName === \"INPUT\";\n    if (!isSearchInput) return;\n\n    const searchWord = $target.value;\n    const { filterOptions: prevFilterOptions } = mainPublisher.state;\n    const filterOptions: MainFilterOptions = { ...prevFilterOptions, searchWord };\n\n    mainPublisher.setState({ ...mainPublisher.state, filterOptions });\n  }\n  // ~~~\n\n  private registerMainTopBarChange(): void {\n    this.getEventTarget()?.addEventListener(\"change\", (e) => this.handleMainTopBarChange(e));\n  }\n  private handleMainTopBarChange(e: Event): void {\n    const $target = e.target as Element;\n    if (!$target) return;\n    const isSelectBox = $target.nodeName === \"SELECT\" && $target.classList.contains(\"app-selectbox\");\n    if (!isSelectBox) return;\n    const $select = $target as HTMLSelectElement;\n\n    const numPost = +$select.value;\n    if (Number.isNaN(numPost)) return;\n\n    const { filterOptions: prevFilterOptions } = mainPublisher.state;\n    mainPublisher.setState({ ...mainPublisher.state, filterOptions: { ...prevFilterOptions, numPost } });\n  }\n  // ------\n}\nexport default MainPageTopBar;\n","import { Board, Pagination } from \"@src/components\";\nimport { Component } from \"@src/core\";\nimport { mainPublisher, MainFilterOptions, initMainState, createPostData, editPublisher } from \"@src/core/Store\";\nimport { getAllPostData } from \"@src/utils/functions\";\n\nimport \"./style.scss\";\n\ninterface MainPageBoardState {\n  isUpdate: boolean;\n}\n\nclass MainPageBoard extends Component<MainPageBoardState> {\n  protected init(): void {\n    this.initGetAllPostData();\n    this.setState({ ...this.state, isUpdate: false }, { noRender: true });\n  }\n\n  protected initSubscriber(): void {\n    // main\n    this.registerSubscriberFunction(mainPublisher, () => {\n      const { currKeys } = mainPublisher.recentChangedKeys;\n      if (currKeys.includes(\"isInit\")) return this.execInitMainPageBoard();\n      if (currKeys.includes(\"filterOptions\") || currKeys.includes(\"postData\") || currKeys.includes(\"isRefresh\"))\n        this.execUpdateMainPageBoard(currKeys.includes(\"isRefresh\"));\n    });\n  }\n\n  protected setBeforeRender(): void {\n    if (!this.state) return;\n    if (this.state.isUpdate) this.setState({ ...this.state, isUpdate: false }, { noRender: true });\n  }\n\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<div class=\"main__page--board\" data-component-id=${componentId}></div>`;\n  }\n\n  protected setChildren(): void {\n    const { filterOptions, postData } = mainPublisher.state;\n    const { pageNum, numPost } = filterOptions;\n\n    // 👇 여기서만 filterOptions에 따른 데이터 적용(Board 컴포넌트에만 적용)\n    const arrPostData = createPostData({ filterOptions, postData });\n    new Board(\".main__page--board\", { arrPostData });\n\n    // 👇 여기서는 필터링되어 잘라낸 데이터가 아닌 필터링 된 전체 데이터 갯수를 기준으로 해야함!\n    const pageOnlyPostData = createPostData({ filterOptions, postData, isFullData: true });\n    const max = Math.ceil(pageOnlyPostData.length / numPost);\n    new Pagination(\".main__page--board\", { pageNum, max });\n  }\n\n  protected setEvents(): void {\n    this.registerMainBoardClick();\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  /** 👾 initGetAllPostData: 서버에서 모든 게시물 데이터를 가져와서 mainPublisher 업데이트\n   * - 초기 렌더링에는 무조건 실행하지만, 작성 & 수정때는 mainPublisher에 등록된 함수들은 실행되면 안됨.\n   */\n  private async initGetAllPostData() {\n    const latestPostdata = await getAllPostData();\n    if (!latestPostdata) return;\n    const { isEdited } = editPublisher.state;\n\n    initMainState.postData = latestPostdata;\n    mainPublisher.setState(\n      { ...mainPublisher.state, postData: [...latestPostdata] },\n      { notExec: isEdited ? true : undefined }\n    );\n    if (isEdited) editPublisher.setState({ ...editPublisher.state, isEdited: false }, { notExec: true });\n  }\n\n  // ------\n\n  // [2] Events\n  private registerMainBoardClick(): void {\n    this.getEventTarget()?.addEventListener(\"click\", (e) => this.handleMainBoardClick(e));\n  }\n  private handleMainBoardClick(e: MouseEvent | Event): void {\n    const $target = e.target as HTMLElement;\n    const isRouterLink = $target.nodeName === \"A\" && $target.classList.contains(\"app-link\");\n    if (isRouterLink) return;\n\n    const $board = $target.closest(\".app-board\");\n    const $pagination = $target.closest(\".app-pagination\");\n    if (!$board && !$pagination) return;\n    if ($board) {\n      const $tr = $target.closest(\"tr\");\n      if (!$tr) return;\n\n      const isCreatedDate = $target.nodeName === \"TH\" && $target.classList.contains(\"createdDate\");\n      const isAuthor = $target.nodeName === \"TD\" && $target.classList.contains(\"author\") && $target.textContent;\n      if (isCreatedDate) return this.execCreatedDateClick();\n      if (isAuthor && $target.textContent) return this.execAuthorClick($target.textContent);\n    } else {\n      const isItem = $target.nodeName === \"LI\";\n      if (isItem) return this.execPaginationItemClick($target as HTMLLIElement);\n    }\n  }\n\n  /** 게시판 Item 클릭 - 작성일 정렬 */\n  private execCreatedDateClick(): void {\n    const { filterOptions: prevFilterOptions } = mainPublisher.state;\n    const isDesc = !prevFilterOptions.isDesc; // 항상 이전 값과 반대로\n\n    const filterOptions = { ...prevFilterOptions, isDesc };\n\n    mainPublisher.setState({ ...mainPublisher.state, filterOptions });\n    this.setState({ ...this.state, isUpdate: true }, { isSetEvents: false });\n  }\n\n  private execAuthorClick(author: string): void {\n    const { filterOptions: prevFilterOptions } = mainPublisher.state;\n    const filterOptions = { ...prevFilterOptions, author };\n\n    mainPublisher.setState({ ...mainPublisher.state, filterOptions });\n    this.setState({ ...this.state, isUpdate: true }, { isSetEvents: false });\n  }\n\n  /** 페이지네이션 Item 클릭 */\n  private execPaginationItemClick($li: HTMLLIElement): void {\n    const isPrevNext = $li.classList.contains(\"prev\") || $li.classList.contains(\"next\");\n    const { filterOptions: prevFilterOptions, postData } = mainPublisher.state;\n    let pageNum: number = -1;\n\n    if (isPrevNext) {\n      if (!this.state || $li.classList.contains(\"disabled\")) return;\n      const { pageNum: prevNum, numPost } = prevFilterOptions;\n      const max = Math.ceil(postData.length / numPost);\n\n      const isPrev = $li.classList.contains(\"prev\");\n      pageNum = isPrev ? prevNum - 5 : prevNum + 5;\n      if (pageNum > max) pageNum = max;\n      else if (pageNum <= 0) pageNum = 1;\n    } else {\n      const tmpPageNum = +`${$li.textContent}`;\n      if (Number.isNaN(tmpPageNum)) return;\n      pageNum = tmpPageNum;\n    }\n    const filterOptions: MainFilterOptions = { ...prevFilterOptions, pageNum };\n\n    mainPublisher.setState({ ...mainPublisher.state, filterOptions }, { notExec: true });\n    this.setState({ ...this.state, isUpdate: true }, { isSetEvents: false });\n  }\n\n  // ------\n\n  // [3] 전역 상태 변경 시 사용\n  /** 게시물 초기화 (MainPageTopBar의 '초기화'버튼이 클릭되었을 때 작동) */\n  private execInitMainPageBoard(): void {\n    mainPublisher.setState({ ...mainPublisher.state, ...initMainState, isInit: false }, { notExec: true });\n    this.setState({ ...this.state, isUpdate: true }, { isSetEvents: false });\n  }\n\n  /** 게시물 업데이트 (새로고침 버튼 클릭 시 작동) */\n  private execUpdateMainPageBoard(isRefresh?: boolean): void {\n    if (isRefresh) mainPublisher.setState({ ...mainPublisher.state, isRefresh: false }, { notExec: true });\n    return this.setState({ ...this.state, isUpdate: true }, { isSetEvents: false });\n  }\n}\nexport default MainPageBoard;\n","import { DetailPageBottomBar, DetailPageContent } from \"@src/compositions\";\nimport { Component, createQueryStrings } from \"@src/core\";\nimport \"./style.scss\";\n\nclass DetailPage extends Component {\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<div class=\"detail__page default-page-size\" data-component-id=${componentId}></div>`;\n  }\n\n  protected setChildren(): void {\n    const serach = new URL(window.location.href).search;\n    const dataId = (createQueryStrings(serach)?.find((v) => v.key === \"id\")?.value);\n\n    new DetailPageContent(\".detail__page\", { dataId });\n    new DetailPageBottomBar(\".detail__page\", { dataId });\n  }\n}\nexport default DetailPage;\n","import { EditPageBottomBar, EditPageContent } from \"@src/compositions\";\nimport { Component } from \"@src/core\";\nimport { editPublisher, mainPublisher, initMainState } from \"@src/core/Store\";\n\nclass EditPage extends Component {\n  protected initSubscriber(): void {\n    this.registerSubscriberFunction(mainPublisher, () => {\n      const { currKeys } = mainPublisher.recentChangedKeys;\n      if (currKeys.includes(\"editId\")) this.registerEditData();\n    });\n  }\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<div class=\"edit__page default-page-size\" data-component-id=${componentId}></div>`;\n  }\n\n  protected setChildren(): void {\n    const { editData } = editPublisher.state;\n    new EditPageContent(\".edit__page\", { editData });\n    new EditPageBottomBar(\".edit__page\");\n  }\n\n  // --------------------------------------------------\n\n  // [1] 일반\n  // ------\n\n  // [2] Events\n  // ------\n\n  // [3] 전역 상태 변경 시 사용\n  /** 전역에서 editId가 업데이트 되었을 시 작동, 데이터 가져옴 (this.state, editPublisher.state에 확정) */\n  private registerEditData(): void {\n    const { editId, postData } = mainPublisher.state;\n    if (editId === -1) return;\n    const editData = postData.find(({ id }) => editId === id);\n    if (!editData) return;\n\n    editPublisher.setState({ ...editPublisher.state, editData });\n    mainPublisher.setState({ ...mainPublisher.state, editId: initMainState.editId }, { notExec: true });\n    this.setState({ ...this.state, editData }, { isSetEvents: false });\n  }\n  // ------\n}\nexport default EditPage;\n","import { MainPageBoard, MainPageTopBar } from \"@src/compositions\";\nimport { Component } from \"@src/core\";\nimport \"./style.scss\";\n\nclass MainPage extends Component {\n  protected setTemplate(): string {\n    const { componentId } = this;\n    return `<div class=\"main__page default-page-size\" data-component-id=${componentId}></div>`;\n  }\n  protected setChildren(): void {\n    new MainPageTopBar(\".main__page\");\n    new MainPageBoard(\".main__page\");\n  }\n}\nexport default MainPage;\n","import { DetailPage, EditPage, MainPage } from \"@src/pages\";\nimport { TargetType } from \"../Component\";\nimport { RenderPathProps, RouterInfo } from \".\";\nimport CustomError from \"../CustomError\";\n\n/** ✨ renderPath: 현재 path를 기반으로 routerInfo에서 페이지 컴포넌트 정보를 불러와서 렌더링 */\nexport function renderPath({ href, routerInfo, componentName, publisherList }: RenderPathProps): void {\n  try {\n    if (!routerInfo) throw new CustomError(\"NOT_FOUND_ROUTER_INFO\", componentName);\n    const { pathname } = new URL(href);\n    const info = routerInfo[pathname];\n\n    if (!info) return; // NOTFOUND로 가게하기.\n    const { Component: PageComponent, props } = info;\n\n    let $target = info.$target;\n    if (typeof $target === \"string\") $target = document.querySelector($target);\n    if (!$target) return;\n    $target.innerHTML = \"\";\n\n    if (publisherList) publisherList.forEach((pub) => pub.clear()); // Publisher 초기화\n    new PageComponent($target, props);\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** ✨ createRouterInfo: 이 애플리케이션에서 쓸 페이지 정보 생성 */\nexport function createRouterInfo($target: TargetType = document.querySelector(\"#root\")): RouterInfo {\n  const routerInfo: RouterInfo = {\n    \"/\": { $target, Component: MainPage },\n    \"/detail\": { $target, Component: DetailPage },\n    \"/edit\": { $target, Component: EditPage },\n    \"/write\": { $target, Component: EditPage },\n  };\n  return routerInfo;\n}\n\ninterface QueryStringDetail {\n  key?: string;\n  value?: string;\n}\n\n/** ✨ createQueryStrings: 쿼리스트링 분석하여 객체로 반환  */\nexport const createQueryStrings = (queryString: string): QueryStringDetail[] | null => {\n  try {\n    const regEx = /(?<key>[\\w]+)=(?<value>[\\w]+)/g;\n    const arrMatchs = Array.from(queryString.matchAll(regEx)) ?? [];\n    if (!arrMatchs || !arrMatchs.length) return null;\n    return arrMatchs.map((v) => v.groups) as QueryStringDetail[];\n  } catch (e) {\n    return null;\n  }\n};\n","import Component, { Props, TargetType } from \"../Component\";\nimport { renderPath, RouterInfo } from \"../Router\";\nimport { Publisher } from \"../Store\";\nimport \"./style.scss\";\n\ntype DefaultLinkProps = Pick<HTMLAnchorElement, \"href\" | \"text\"> & Partial<Pick<HTMLAnchorElement, \"name\">>;\nexport interface RouterLinkProps extends Props, DefaultLinkProps {\n  routerInfo: RouterInfo;\n  publisherList: Publisher[];\n  isButton?: boolean;\n  callbackOption?: {\n    func: () => boolean | void;\n    runPosition: \"beforePushState\" | \"afterRenderPath\";\n  };\n}\n\n/**\n * [RouterLink]\n * - a 태그를 통한 페이지 이동 컴포넌트 (Component 상속 & Router 일부 사용)\n */\nclass RouterLink extends Component<{}, RouterLinkProps> {\n  constructor(protected readonly $target: TargetType, protected props: RouterLinkProps) {\n    super($target, props);\n  }\n  protected setTemplate(): string {\n    if (!this.props) return \"\";\n    const { componentId, props } = this;\n    const { text, isButton } = props;\n\n    const excludeStrs = [\"routerInfo\", \"publisherList\", \"isButton\", \"callbackOption\", \"text\"];\n    const strAttrs = this.createStringAttribute(...excludeStrs);\n    const strClassName = `${isButton ? \" btn\" : \"\"}`;\n\n    return `<a class=\"app-link ${strClassName}\" ${strAttrs} data-component-id=${componentId}>${text ?? \"\"}</a>`;\n  }\n  protected setEvents(): void {\n    this.registerAnchorClick();\n  }\n\n  // =====\n\n  private registerAnchorClick(): void {\n    this.getEventTarget()?.addEventListener(\"click\", (e) => this.anchorClickHandler(e));\n  }\n\n  private anchorClickHandler(e?: MouseEvent | Event): void {\n    e?.preventDefault();\n    const $target = e?.target as HTMLElement;\n    const $currentTarget = e?.currentTarget as HTMLAnchorElement;\n    if (!$currentTarget || $target !== $currentTarget) return;\n    const href = $currentTarget.href;\n    if (!href) return;\n\n    const { callbackOption: cb } = this.props;\n    if (cb?.func && cb.runPosition === \"beforePushState\") {\n      const execFunc = cb.func();\n      const isBooleanFunc = typeof execFunc === \"boolean\";\n      if (isBooleanFunc && !execFunc) return;\n    }\n\n    window.history.pushState({ href }, \"\", href);\n\n    const { routerInfo, publisherList } = this.props;\n    const componentName = `${this.constructor.name}(${this.componentId})`;\n    renderPath({ href, componentName, routerInfo, publisherList });\n    if (cb?.func && cb.runPosition === \"afterRenderPath\") cb.func();\n  }\n}\n\nexport default RouterLink;\n","import App from \"./App\";\nimport \"./index.scss\";\n\nnew App(\"#root\");","import { Component, Router, createRouterInfo, TargetType } from \"@src/core\";\nimport { editPublisher, mainPublisher } from \"./core/Store\";\n\nclass App extends Component {\n  constructor($root: TargetType) {\n    super($root);\n  }\n  protected init(): void {\n    if (!this.$target || typeof this.$target === \"string\") return;\n    new Router(this.$target, createRouterInfo(), [mainPublisher, editPublisher]);\n  }\n}\nexport default App;\n","/**\n * [Router]\n * - App 컴포넌트에서 페이지 설정, 이전 & 다음페이지 기능\n * - 참고사항\n *    - a 태그를 통한 페이지 이동(pushState)은 src/core/RouterLink 컴포넌트 참고\n */\nimport CustomError from \"../CustomError\";\nimport { ComponentItemType } from \"../Component\";\nimport { renderPath } from \"./functions\";\nimport { Publisher } from \"../Store\";\nexport * from \"./functions\";\n\nexport type RouterInfo = {\n  [key: string]: ComponentItemType;\n};\n\nexport interface RenderPathProps {\n  href: string;\n  componentName?: string;\n  routerInfo: RouterInfo;\n  publisherList: Publisher[];\n}\n\n// ========\n\nclass Router {\n  constructor(\n    protected readonly $target: Element | null,\n    protected readonly routerInfo: RouterInfo,\n    private readonly publisherList: Publisher[],\n  ) {\n    try {\n      if ($target === null) throw new CustomError(\"NOT_FOUND_TARGET\", this.constructor.name);\n      this.init();\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  /**\n   * 👾 init\n   * - setPopStateEvent: 이전 페이지 & 다음 페이지 이벤트 설정\n   */\n  private init(): void {\n    this.setPopStateEvent();\n    const href = window.location.href;\n    const { routerInfo, publisherList } = this;\n    renderPath({ href, componentName: this.constructor.name, routerInfo, publisherList });\n  }\n\n  private setPopStateEvent(): void {\n    window.addEventListener(\"popstate\", () => this.popStateEventHandler());\n  }\n  private popStateEventHandler(e?: PopStateEvent): void {\n    const href = window.location.href;\n    const { routerInfo, publisherList } = this;\n    renderPath({ href, componentName: this.constructor.name, routerInfo, publisherList });\n  }\n}\n\nexport default Router;\n"],"names":["errorMessage","NOT_FOUND_TARGET","NOT_FOUND_ROUTER_INFO","CustomError","Error","constructor","msgType","name","super","initState","setStateCallback","_notExec","_recentChangedKeys","prevKeys","currKeys","largeKeySet","Set","_observers","this","_state","_prevState","state","recentChangedKeys","newState","updateRecentChangedKeys","exec","setState","options","notExec","forEach","func","add","remove","delete","clear","clearLargeKeySet","Object","values","every","arrValue","length","getRecentKeys","v","arrState","entries","arrPrevState","result","i","key","value","prevKey","prevValue","JSON","stringify","push","getParseLocalItem","strItem","localStorage","getItem","getLocalItem","parse","setConvertLocalItem","setItem","setLocalItem","execFetch","type","url","id","END_POINT","currType","createURL","res","fetch","status","json","e","console","error","message","getAllPostData","resData","data","arrPosts","post","createdDate","Date","sort","a","b","initMainState","postData","editId","isInit","isRefresh","filterOptions","author","searchWord","isDesc","undefined","numPost","pageNum","numPostList","LOCAL_MAIN_KEY","mainPublisher","getLocalMainPublisherState","createPostData","isFullData","funcs","reduce","currData","pipe","arrPostData","filter","createAuthorFilterItems","replacedSearchword","replace","subject","indexOf","createSearchFilterItems","valueOf","createDateSortItems","max","Math","ceil","startIdx","endIdx","slice","createNumPostItems","initEditState","editData","contents","isEdited","LOCAL_EDIT_KEY","editPublisher","origin","pathname","URL","window","location","href","mainLocalState","isNeedReset","history","pushState","removeItem","isResetEditLocalState","getLocalEditPublisherState","getRandomNumber","min","floor","random","createNodes","originEle","Array","from","childNodes","updateNodes","prevNodes","newNodes","isNeedFixNodes","MAX_LENGTH","idx","prevNode","find","newNode","Element","prevId","newId","HTMLElement","dataset","componentId","tmpNode","fixedNewNodes","execDifferentCheck","execAttributesCheck","prevChildren","newChildren","isRemove","isAppend","removeChild","appendChild","isNotSameType","nodeName","isDiffText","node","Text","nodeValue","replaceChild","newAttrs","attributes","prevAttrs","prevName","setAttribute","newName","removeAttribute","defaultPropsKeys","$target","props","_renderState","startCode","endCode","charCodeAt","Boolean","round","String","fromCharCode","makeComponentId","document","querySelector","init","initSubscriber","render","registerSubscriberFunction","publisher","_subscriber","registerFunc","removeFunc","noRender","isSetEvents","setBeforeRender","isNotKeepAdding","initInsertPosition","insertPosition","insertAdjacentHTML","setTemplate","updateComponentNodes","setChildren","setEvents","strTemplate","tempEle","createElement","innerHTML","createTemplateNodes","getEventTarget","$result","createStringAttribute","excludeStrs","arrExclude","includes","arrHeadKeyName","keys","strData","createTDStrings","map","txt","width","join","str","routerInfo","createRouterInfo","$tdSubject","text","publisherList","strTds","isSubject","toLocaleDateString","createLiItemStrings","REMAINDER","items","nIdx","strClassName","strLastItem","selectedValue","isFullSize","commonLinkProps","isButton","dataId","callbackOption","runPosition","registerDetailBottomBarClick","addEventListener","handleDetailBottomBarClick","target","classList","contains","HTMLButtonElement","confirm","requestDeleteData","method","body","headers","back","postDataKorKeys","requiredPostDataKeys","textInfoStrings","createPostDataStrings","textInfoItems","toLocaleString","regsiterEditData","registerEditBottomBarClick","handleEditBottomBarClick","notEmptyCnt","isOK","isEdit","requestCreateData","createEditInfoStrings","placeholder","registerEditContentsKeyup","handleEditContentsKeyup","isTextarea","createSelector","registerMainTopBarClick","registerMainTopBarKeyUp","registerMainTopBarChange","handleMainTopBarClick","closest","buttonName","initMainTopBarElements","refrashPostData","$searchInput","$selectbox","latestPostdata","handleMainTopBarKeyUp","prevFilterOptions","handleMainTopBarChange","Number","isNaN","initGetAllPostData","isUpdate","execInitMainPageBoard","execUpdateMainPageBoard","pageOnlyPostData","registerMainBoardClick","handleMainBoardClick","$board","$pagination","isCreatedDate","isAuthor","textContent","execCreatedDateClick","execAuthorClick","execPaginationItemClick","$li","isPrevNext","prevNum","tmpPageNum","serach","search","createQueryStrings","registerEditData","renderPath","componentName","info","Component","PageComponent","pub","queryString","regEx","arrMatchs","matchAll","groups","registerAnchorClick","anchorClickHandler","preventDefault","$currentTarget","currentTarget","cb","execFunc","$root","setPopStateEvent","popStateEventHandler"],"sourceRoot":""}